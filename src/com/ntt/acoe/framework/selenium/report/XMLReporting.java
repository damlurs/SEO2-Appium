package com.ntt.acoe.framework.selenium.report;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.ntt.acoe.framework.config.Environment;
import com.ntt.acoe.framework.run.TestRunner;

/*
 * @author Santosh Hariprasad (NTT Badge Id: 244583,
 *         Santhosh.Hariprasad@NTTDATA.com)
 * @version 1.0
 * @since 2015-01-01
 */

public class XMLReporting {

	public static void createNewXMLReport() throws IOException {
		createNewXMLReport(Environment.get("report_path") + "/TestScriptReport_" + TestRunner.timeStamp + ".xml", "Test Report", "Generated by Selenium O2") ;
	}
	
	public static void createNewXMLReport(String fileName, String name, String description) {
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.newDocument();
			
			doc.appendChild( buildReportElement(doc, name, description) );
	
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult dest = new StreamResult(fileName);
			transformer.transform(source, dest);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static Element buildReportElement(Document doc, String name, String description) {
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
		Date dt = new Date();
		String starttime = df.format(dt);
		
		Attr attrName = doc.createAttribute("name");
		Attr attrStartTime = doc.createAttribute("starttime");
		Attr attrEndTime = doc.createAttribute("endtime");
		Attr attrDescription = doc.createAttribute("description");
		Attr attrTotalScripts = doc.createAttribute("totalscripts");
		Attr attrPassedScripts = doc.createAttribute("passedscripts");
		attrName.setValue(name);		
		attrStartTime.setValue(starttime);		
		attrEndTime.setValue("");
		attrTotalScripts.setValue("");
		attrPassedScripts.setValue("");
		attrDescription.setValue(description);	
		
		Element testReportElement = doc.createElement("testreport");
		
		testReportElement.setAttributeNode(attrName);
		testReportElement.setAttributeNode(attrStartTime);
		testReportElement.setAttributeNode(attrEndTime);
		testReportElement.setAttributeNode(attrTotalScripts);
		testReportElement.setAttributeNode(attrPassedScripts);
		testReportElement.setAttributeNode(attrDescription);	
		
		return testReportElement;
	}	
	
	public static void addScriptElement(String fileName, String name, String status) {
		try{
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new File(fileName));
			doc.getDocumentElement().normalize();
			Element root = doc.getDocumentElement();
			
			Element testscript = buildScriptElement(doc, name, status);
			root.appendChild(testscript);
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult dest = new StreamResult(fileName);
			transformer.transform(source, dest);			
		}catch (Exception e) {
			e.printStackTrace();
		}			
	}
	
	private static Element buildScriptElement(Document doc, String name, String status) {
		Attr attrName = doc.createAttribute("name");
		Attr attrStatus = doc.createAttribute("status");
		Attr attrStartTime = doc.createAttribute("starttime");
		Attr attrEndTimr = doc.createAttribute("endtime");	
		
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
		Date dt = new Date();
		String starttime = df.format(dt);
		
		attrName.setValue(name);
		attrStatus.setValue(status);
		attrStartTime.setValue(starttime);
		attrEndTimr.setValue("");
		
		Element testscript = doc.createElement("testscript");
		testscript.setAttributeNode(attrName);
		testscript.setAttributeNode(attrStatus);
		testscript.setAttributeNode(attrStartTime);
		testscript.setAttributeNode(attrEndTimr);		

		return testscript;
	}
	
	public static Document addStepElement(String fileName, String scriptName, String method, String status,String starttime, String description,  String screenshot) {
		try {
			File inputFile = new File(fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList scriptNodes = doc.getElementsByTagName("testscript");
			
			 for (int i = 0; i < scriptNodes.getLength(); i++) {
                 Node currentScriptNode = scriptNodes.item(i);
                 if (currentScriptNode.getNodeType() == Node.ELEMENT_NODE) {
                	 NamedNodeMap attributes = currentScriptNode.getAttributes();
                	 for (int a = 0; a < attributes.getLength(); a++) {
                	         Node theAttribute = attributes.item(a);
                	         if(theAttribute.getNodeName().trim().equalsIgnoreCase("name")){
                	        	 if(theAttribute.getNodeValue().trim().equalsIgnoreCase(scriptName)){
	                	        	 Element newStepElement = buildStepElement(doc, method, status, starttime, description, screenshot);
	                	        	 currentScriptNode.appendChild(newStepElement);
	                	        	 break;
                	        	 }
                	         }
                	 }
                 }
             }
             
			 try {
					TransformerFactory transformerFactory = TransformerFactory.newInstance();
					Transformer transformer = transformerFactory.newTransformer();
					DOMSource source = new DOMSource(doc);
					StreamResult dest = new StreamResult(fileName);
					transformer.transform(source, dest);
				} catch (Exception e) {
					e.printStackTrace();
				}
			 
			 return doc;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static Element buildStepElement(Document doc, String method, String status,String starttime, String description, String screenshot) {
		Attr attrMethod = doc.createAttribute("method");
		attrMethod.setValue(method);
		Element statusElement = doc.createElement("status");
		statusElement.appendChild(doc.createTextNode(status));
		Element starttimeElement = doc.createElement("starttime");
		starttimeElement.appendChild(doc.createTextNode(starttime));
		Element descriptionElement = doc.createElement("description");
		descriptionElement.appendChild(doc.createTextNode(description));
		Element screenshotElement = doc.createElement("screenshot");
		screenshotElement.appendChild(doc.createTextNode(screenshot));		
		Element teststepElement = doc.createElement("teststep");
		teststepElement.appendChild(statusElement);
		teststepElement.appendChild(starttimeElement);
		teststepElement.appendChild(descriptionElement);
		teststepElement.appendChild(screenshotElement);
		teststepElement.setAttributeNode(attrMethod);
		return teststepElement;
	}
	
	public static void updateScriptStatus(String fileName, String scriptName, String status){
		try {
			File inputFile = new File(fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList scriptNodes = doc.getElementsByTagName("testscript");
			
			 for (int i = 0; i < scriptNodes.getLength(); i++) {
                 Node currentScriptNode = scriptNodes.item(i);
                 if (currentScriptNode.getNodeType() == Node.ELEMENT_NODE) {
                	 NamedNodeMap attributes = currentScriptNode.getAttributes();
                	 for (int a = 0; a < attributes.getLength(); a++) {
                	         Node theAttribute = attributes.item(a);
                	         if(theAttribute.getNodeName().trim().equalsIgnoreCase("name")){
                	        	 if(theAttribute.getNodeValue().trim().equalsIgnoreCase(scriptName.trim())){
                	        		 
                	        		 for (int a1 = 0; a1 < attributes.getLength(); a1++) {
                            	         Node theAttribute1 = attributes.item(a1);
                            	         if(theAttribute1.getNodeName().trim().equalsIgnoreCase("status")){
                            	        	 theAttribute1.setTextContent(status);
                            	         }
                            	         if(theAttribute1.getNodeName().trim().equalsIgnoreCase("endtime")){
                         	       	  		DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
                        	       			Date dt = new Date();
                        	       			String endtime = df.format(dt);
                            	        	 theAttribute1.setTextContent(endtime);
                            	         }                            	         
                	        		 }
                	        		 
	                	        	 break;
                	        	 }
                	         }
                	 }
                 }
             }
             
			 try {
					TransformerFactory transformerFactory = TransformerFactory.newInstance();
					Transformer transformer = transformerFactory.newTransformer();
					DOMSource source = new DOMSource(doc);
					StreamResult dest = new StreamResult(fileName);
					transformer.transform(source, dest);
				} catch (Exception e) {
					e.printStackTrace();
				}
			 
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void updateReportElementEndTime(String fileName, int totalScripts, int passedScripts){
		try {
			File inputFile = new File(fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			Element reportElement = doc.getDocumentElement();
			
			NamedNodeMap attributes = reportElement.getAttributes();
       	 	for (int a = 0; a < attributes.getLength(); a++) {
       	         Node theAttribute = attributes.item(a);
       	         if(theAttribute.getNodeName().trim().equalsIgnoreCase("endtime")){
	       	  		DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
	       			Date dt = new Date();
	       			String endtime = df.format(dt);
    	        	 theAttribute.setTextContent(endtime);
       	         }
       	         
       	         if(theAttribute.getNodeName().trim().equalsIgnoreCase("totalscripts")){
       	        	 theAttribute.setTextContent(String.valueOf(totalScripts));
     	         }      
       	         
       	         if(theAttribute.getNodeName().trim().equalsIgnoreCase("passedscripts")){
       	        	 theAttribute.setTextContent(String.valueOf(passedScripts));
     	         }       	         

       	 	}
			
            
			 try {
					TransformerFactory transformerFactory = TransformerFactory.newInstance();
					Transformer transformer = transformerFactory.newTransformer();
					DOMSource source = new DOMSource(doc);
					StreamResult dest = new StreamResult(fileName);
					transformer.transform(source, dest);
				} catch (Exception e) {
					e.printStackTrace();
				}
			 
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
}
